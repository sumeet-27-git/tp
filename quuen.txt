#include <iostream>
#include <vector>

using namespace std;

// Function to print the n-Queens board
void printBoard(const vector<vector<int>>& board) {
    int n = board.size();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 1) {
                cout << "Q ";
            } else {
                cout << ". ";
            }
        }
        cout << endl;
    }
    cout << endl;
}

// Function to check if a Queen can be placed in a specific position
bool isSafe(const vector<vector<int>>& board, int row, int col) {
    int n = board.size();

    // Check the left side of the current row
    for (int i = 0; i < col; i++) {
        if (board[row][i] == 1) {
            return false;
        }
    }

    // Check upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check lower diagonal on the left side
    for (int i = row, j = col; i < n && j >= 0; i++, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true;
}

// Function to solve the n-Queens problem using backtracking
bool solveNQueens(vector<vector<int>>& board, int col) {
    int n = board.size();

    // Base case: If all Queens are placed
    if (col >= n) {
        return true;
    }

    // Try placing this Queen in all rows one by one
    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;

            if (solveNQueens(board, col + 1)) {
                return true; // If placing the Queen leads to a solution
            }

            // If placing the Queen doesn't lead to a solution, backtrack
            board[i][col] = 0;
        }
    }

    // If the Queen cannot be placed in any row in this column
    return false;
}

int main() {
    int n;
    cout << "Enter the value of n for n-Queens: ";
    cin >> n;

    vector<vector<int>> board(n, vector<int>(n, 0));

    // Place the first Queen in the first column (you can choose any valid position)
    board[0][0] = 1;

    // Solve the n-Queens problem
    if (solveNQueens(board, 1)) {
        cout << "Solution found:" << endl;
        printBoard(board);
    } else {
        cout << "No solution exists for the given configuration." << endl;
    }

    return 0;
}
